from bolt_expressions import Scoreboard, Data

from ../../utils import generate_helper_function_unique_name, debug_say
from ../../infrastructure/uuid_entry_database import UUIDEntryDatabase
from ../../infrastructure/forceload_manager import ForceloadManager
from ../../interactions/interaction_check import interaction_check
from ./common import DATABASE_NAME, close_bag
from ../../tags import BAG_OF_HOLDING_EXIT_TAG, IN_BAG_OF_HOLDING_EXIT_TAG

EXIT_TAG = BAG_OF_HOLDING_EXIT_TAG
PLAYER_TAG = IN_BAG_OF_HOLDING_EXIT_TAG
    

function f"{__name__}/tick":
    interaction_check(interactable_tag=EXIT_TAG, player_tag=PLAYER_TAG)
    execute as @a[tag=PLAYER_TAG] at @s:
        close_bag()
    function f"{__name__}/make_item_display"


function f"{__name__}/make_item_display":
    display_helper = generate_helper_function_unique_name()
    function display_helper:
        $summon item_display ~ ~ ~ {item: $(Item), item_display: "ground", Rotation: $(Rotation)}
        data modify entity @n[type=item_display] transformation.translation[2] set value -0.12
        data modify entity @n[type=item_display] transformation.right_rotation set value [0.7071f,0,0,0.7071f]
        summon interaction ~ ~ ~ {width: 0.25, height: 0.25, response: 1b, Tags: ["inf.item"]}

    execute as @e[predicate=hod:boh_item_on_ground, tag=!inf.unstored, limit=1] at @s:
        function display_helper with entity @s
        kill @s

function f"{__name__}/unstore_item":
    itemize_helper = generate_helper_function_unique_name()
    function itemize_helper:
        $summon item ~ ~ ~ {Item: $(item), Tags: ["inf.unstored"]}
        kill @n[type=item_display]
        kill @s

    interaction_helper = generate_helper_function_unique_name()
    function interaction_helper:
        a = "$execute as @e[nbt={interaction: {player: $(UUID)}}] at @s run function " + itemize_helper + " with entity @n[type=item_display]"
        raw (a)
    
    execute as @p at @s:
        debug_say("itemize!")
        function interaction_helper with entity @s
        advancement revoke @s only hod:mechanics/bag_of_holding/unstore_item

place_helper = generate_helper_function_unique_name("place_helper")
function place_helper:
    $execute in hod:bag_of_holding run place template hod:bag_of_holding 0 100 $(z) none none 1 0 strict

def initialize_room(player="@s"):
    pid = Scoreboard.objective("siberia.pid")[player]
    initialized = Scoreboard.objective("siberia.bag_of_holding_initialized")[player]
    database = UUIDEntryDatabase(DATABASE_NAME)
    temp = Data.storage("sib.temp")

    if initialized < 1:
        temp.z = pid * 10 + 4
        database.save_value(player, '{x: 4, y: 101, dim: "hod:bag_of_holding"}', "bag_coords")
        database.save_from(player, temp.z, "bag_coords.z")
        temp.z = pid * 10
        debug_say("placing")
        with ForceloadManager(0, 0, 0, pid * 10 + 4, "hod:bag_of_holding"):
            function place_helper with storage sib.temp
        initialized = 1