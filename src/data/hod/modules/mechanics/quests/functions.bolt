from beet import Predicate
from infra.quests import Quest, QuestGoal
from bolt_expressions import Data, Scoreboard
from ../../utils import debug_say, generate_helper_function_unique_name, selector

_quests = [
    Quest(
        id="test_quest",
        name="Test Quest",
        description="This is a test quest.",
        goals=[
            QuestGoal(
                description="Collect 50 log blocks",
                pre_check="hod:test_helper",
                to_complete={
                    "condition": "minecraft:entity_properties",
                    "range": 0,
                    "entity": "this",
                    "predicate": {
                        "slots": {
                            "container.*": {
                                "items": "#minecraft:logs",
                                "count": {
                                    "min": 50
                                }
                            }
                        }
                    }
                }
            )
        ],
        on_complete="hod:mechanics/quests/rewards/test_quest"
    ),
    Quest(
        id="pie_quest",
        name="Pie Quest",
        description="This is a test quest.",
        goals=[
            QuestGoal(
                description="Collect 50 pumpkin pies",
                to_complete={
                    "condition": "minecraft:entity_properties",
                    "range": 0,
                    "entity": "this",
                    "predicate": {
                        "slots": {
                            "container.*": {
                                "items": "minecraft:pumpkin_pie",
                                "count": {
                                    "min": 50
                                }
                            }
                        }
                    }
                }
            )
        ],
        on_complete="hod:mechanics/quests/rewards/test_quest"
    ),
    Quest(
        id="jump_quest",
        name="Jump for us!",
        description="This is a test quest.",
        on_begin="hod:clear_jumps",
        on_complete="hod:after_jumps",
        goals=[
            QuestGoal(
                description="Jump 10 times",
                pre_check="hod:everyone_jump_10_times_precheck",
                to_complete=
                    {
                    "condition": "minecraft:value_check",
                    "value": {
                        "type": "minecraft:score",
                        "target": {
                        "type": "minecraft:fixed",
                        "name": "$global"
                        },
                        "score": "jumps",
                        "scale": 1
                    },
                    "range": {
                        "min": 10
                    }
                    }
            )
        ]
    )
]

function hod:clear_jumps:
    scoreboard objectives add jumps minecraft.custom:minecraft.jump
    scoreboard objectives setdisplay sidebar jumps
    jumps = Scoreboard.objective("jumps")
    execute as @a:
        jumps["@s"] = 0


function hod:everyone_jump_10_times_precheck:
    jumps = Scoreboard.objective("jumps")
    jumps["$global"] = 0
    execute as @a:
        jumps["$global"] += jumps["@s"]

function hod:after_jumps:
    scoreboard objectives remove jumps

function hod:_empty:
    pass

function f"{__name__}/quest_complete":
    helper = generate_helper_function_unique_name()
    function helper:
        execute at @p playsound minecraft:entity.player.levelup neutral @a ~ ~ ~ 0.3 1.5

    $title @a subtitle {"text":"$(name)"}
    title @a title {"text":"Quest Complete"}
    schedule function helper 1t

function f"{__name__}/quest_begin":
    helper = generate_helper_function_unique_name()
    function helper:
        execute at @p playsound minecraft:entity.player.levelup neutral @a ~ ~ ~ 0.3 0.5

    $title @a subtitle {"text":"$(description)"}
    $title @a title {"text":"New Quest - $(name)!"}
    schedule function helper 1t

function hod:test_helper:
    say QUEST HELPER

def register_predicates(q: Quest):
    for goal in q.goals:
        if goal.to_complete:
            ctx.data[f"{ctx.project_name}:{goal.id}_complete"] = Predicate(goal.to_complete)
        if goal.to_fail:
            ctx.data[f"{ctx.project_name}:{goal.id}_fail"] = Predicate(goal.to_fail)

function f"{__name__}/load":
    schedule clear f"{__name__}/check"
    scoreboard objectives add hod.goal_complete dummy

    quests_storage = Data.storage("hod:quests").all
    quests_storage = {}

    for _quest in _quests:
        register_predicates(_quest)
        quests_storage[_quest.id] = _quest.model_dump(mode='python', exclude_none=True)

    function f"{__name__}/check"

function f"{__name__}/activate":
    schedule clear f"{__name__}/check"

    function f"{__name__}/activate_helper":
        a = f"$function {__name__}/quest_begin with storage hod:quests all.$(id)"
        raw (a)
        $function $(on_begin)

    $data modify storage hod:quests active append from storage hod:quests all.$(quest_id)
    a = f"$function {__name__}/activate_helper with storage hod:quests all.$(quest_id)" 
    raw (a)

    function f"{__name__}/check"

function f"{__name__}/clear_active_quests":
    active_quests = Data.storage("hod:quests").active
    active_quests = []

function f"{__name__}/check":
    active_quests = Data.storage("hod:quests").active
    loop = Data.storage("inf:loop")

    execute store result storage inf:loop quest int 1 run data get storage hod:quests active
    loop["quest"] -= 1

    function f"{__name__}/try_complete_quest":
        function f"{__name__}/set_quest_complete":
            function f"{__name__}/quest_complete_helper":
                $function $(on_complete)
                a = f"$function {__name__}/quest_complete with storage hod:quests all.$(id)"
                raw (a)

            a = f"$function {__name__}/quest_complete_helper with storage hod:quests active[$(quest)]"
            raw (a)
            $data remove storage hod:quests active[$(quest)]
            
        function f"{__name__}/set_temp_quest"
        if Data.storage("hod:quests").temp_quest:
            if Data.storage("hod:quests").temp_quest.goals == []:
                function f"{__name__}/set_quest_complete" with storage inf:loop
                data remove storage hod:quests temp_quest

    function f"{__name__}/check_quest_loop":
        if loop["quest"] >= 0:
            function f"{__name__}/check_goals"
            function f"{__name__}/try_complete_quest"
            loop["quest"] -= 1

            function f"{__name__}/check_quest_loop"
    
    function f"{__name__}/check_quest_loop"
    schedule function f"{__name__}/check" 1s append

goal_complete = Scoreboard.objective("hod.goal_complete")["$hod.global"]
quest_complete = Scoreboard.objective("hod.quest_complete")["$hod.global"]

function f"{__name__}/check_goals":
    loop = Data.storage("inf:loop")

    function f"{__name__}/get_goals_helper":
        $execute store result storage inf:loop goal int 1 run data get storage hod:quests active[$(quest)].goals

    function f"{__name__}/get_goals_helper" with storage inf:loop
    loop["goal"] -= 1

    function f"{__name__}/check_goal":
        function f"{__name__}/check_goal_helper":
            $function $(pre_check)
            $execute as @a if predicate hod:$(id)_complete run scoreboard players set $hod.global hod.goal_complete 1

        function f"{__name__}/complete_goal_helper":
            $data modify storage hod:quests active[$(quest)].complete_goals append from storage hod:quests active[$(quest)].goals[$(goal)]
            $data remove storage hod:quests active[$(quest)].goals[$(goal)]

        a = f"$function {__name__}/check_goal_helper with storage hod:quests active[$(quest)].goals[$(goal)]"
        raw (a)

    if goal_complete == 1:
        function f"{__name__}/complete_goal_helper" with storage inf:loop
        goal_complete = 0

    function f"{__name__}/check_goals_loop":
        if loop["goal"] >= 0:
            function f"{__name__}/check_goal" with storage inf:loop
            loop["goal"] -= 1
            function f"{__name__}/check_goals_loop" with storage inf:loop

    function f"{__name__}/check_goals_loop"

function f"{__name__}/set_temp_quest":
    data remove storage hod:quests temp_quest
    function f"{__name__}/set_temp_quest_helper":
        $data modify storage hod:quests temp_quest set from storage hod:quests active[$(quest)]

    function f"{__name__}/set_temp_quest_helper" with storage inf:loop